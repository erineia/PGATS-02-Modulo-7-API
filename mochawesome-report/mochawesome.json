{
  "stats": {
    "suites": 5,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-10T18:29:34.046Z",
    "end": "2025-09-10T18:29:34.165Z",
    "duration": 119,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "25b6f236-5804-4c88-9ad8-c20792dd3bad",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 33,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const res = await request(app)\n  .post('/login')\n  .send({ username: 'Maria', password: '123456' });\ntoken = res.body.token;",
          "err": {},
          "uuid": "2470cade-38c3-464c-823b-0fd56802cc9e",
          "parentUUID": "25b6f236-5804-4c88-9ad8-c20792dd3bad",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "33313f8f-1e8d-4431-9c19-aa33cdf9aa59",
          "title": "Mutation: Transferencias",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\graphql\\external\\transferExternalGraphql.test.js",
          "file": "\\test\\graphql\\external\\transferExternalGraphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Mutation: Transferencias\"",
              "fullTitle": "Mutation: Transferencias \"before all\" hook in \"Mutation: Transferencias\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginUser = require('../fixture/requisicoes/login/loginUser.json');\nconst respostaLogin = await request(process.env.BASE_URL_GRAPHQL)\n  .post('')\n  .send(loginUser);\ntoken = respostaLogin.body.data.loginUser.token;",
              "err": {},
              "uuid": "f8d09ef0-73b3-4961-b1ed-cb167cf02504",
              "parentUUID": "33313f8f-1e8d-4431-9c19-aa33cdf9aa59",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "a) Transferência com sucesso",
              "fullTitle": "Mutation: Transferencias a) Transferência com sucesso",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaEsperada = require('../fixture/respostas/transferencia/validarTransferenciaComSucesso.json');\nconst createTransfer = require('../fixture/requisicoes/transferencia/createTransfer.json');\nconst res = await request(process.env.BASE_URL_GRAPHQL)\n  .post('')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransfer);\nexpect(res.status).to.equal(200);\nexpect(res.body.data.createTransfer)\n  .excluding('date')\n  .to.deep.equal(respostaEsperada.data.createTransfer);",
              "err": {},
              "uuid": "987536a9-9566-4d79-ad71-137f1bbb21e8",
              "parentUUID": "33313f8f-1e8d-4431-9c19-aa33cdf9aa59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b) Sem saldo disponível para transferência",
              "fullTitle": "Mutation: Transferencias b) Sem saldo disponível para transferência",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransfer = require('../fixture/requisicoes/transferencia/createTransfer.json');\ncreateTransfer.variables.amount = 5000;\nconst res = await request(process.env.BASE_URL_GRAPHQL)\n  .post('')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransfer);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal(\n  'Saldo insuficiente para transferência',\n);",
              "err": {},
              "uuid": "02997be6-e5e2-4807-b928-ab742657a3fa",
              "parentUUID": "33313f8f-1e8d-4431-9c19-aa33cdf9aa59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c) Token de autenticação não informado",
              "fullTitle": "Mutation: Transferencias c) Token de autenticação não informado",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransfer = require('../fixture/requisicoes/transferencia/createTransfer.json');\nconst res = await request(process.env.BASE_URL_GRAPHQL)\n  .post('')\n  .send(createTransfer);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Autenticação obrigatória');",
              "err": {},
              "uuid": "8dd8a0ef-4375-4a2a-8988-23c0f6ccbc17",
              "parentUUID": "33313f8f-1e8d-4431-9c19-aa33cdf9aa59",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "987536a9-9566-4d79-ad71-137f1bbb21e8",
            "02997be6-e5e2-4807-b928-ab742657a3fa",
            "8dd8a0ef-4375-4a2a-8988-23c0f6ccbc17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0a45d2e8-f3f5-4ee8-8496-48005c1eaaee",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\controller\\transferController.test.js",
          "file": "\\test\\rest\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "51c21138-3dc8-4866-82c2-803fe431eda9",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\controller\\transferController.test.js",
              "file": "\\test\\rest\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfer Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Jose',\n    to: 'Carlos',\n    amount: 50,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);",
                  "err": {},
                  "uuid": "6dbdeea5-fcf4-43c6-bf4a-7e22788df06e",
                  "parentUUID": "51c21138-3dc8-4866-82c2-803fe431eda9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfer Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(\n  new Error('Usuário remetente ou destinatário não encontrado'),\n);\nconst resposta = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Rosa',\n    to: 'Bela',\n    amount: 50,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);\nsinon.restore();",
                  "err": {},
                  "uuid": "fb372716-c3f5-4533-923c-c921e00409db",
                  "parentUUID": "51c21138-3dc8-4866-82c2-803fe431eda9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfer Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({\n  from: 'Maria',\n  to: 'Neia',\n  amount: 100,\n  date: new Date().toISOString(),\n});\nconst resposta = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'Neia',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(201);\nconst respostaEsperada = require('../fixture/respostas/Quando informo valores válidos eu tenho sucesso com 201 CREATED.json');\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);\nsinon.restore();",
                  "err": {},
                  "uuid": "fb2e1c1d-96aa-4b4d-a957-018054ea9887",
                  "parentUUID": "51c21138-3dc8-4866-82c2-803fe431eda9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dbdeea5-fcf4-43c6-bf4a-7e22788df06e",
                "fb372716-c3f5-4533-923c-c921e00409db",
                "fb2e1c1d-96aa-4b4d-a957-018054ea9887"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b39ce079-0806-4d0e-a04d-8bf93a5cce94",
          "title": "Transfer",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\external\\transferExternal.test.js",
          "file": "\\test\\rest\\external\\transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "74655018-ac84-48d5-92a2-c1c1a79c877d",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\external\\transferExternal.test.js",
              "file": "\\test\\rest\\external\\transferExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfer\"",
                  "fullTitle": "Transfer POST /transfer \"before each\" hook in \"POST /transfer\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(process.env.BASE_URL_REST)\n  .post('/login')\n  .send({\n    username: 'Maria',\n    password: '123456',\n  });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "f6a30a30-ef29-4178-a3d2-4ae9537ebf3c",
                  "parentUUID": "74655018-ac84-48d5-92a2-c1c1a79c877d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer POST /transfer Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'Rosa',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);",
                  "err": {},
                  "uuid": "faa1a99d-3a29-42a3-b04b-ec738b151d0a",
                  "parentUUID": "74655018-ac84-48d5-92a2-c1c1a79c877d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer POST /transfer Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'isabelle',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);",
                  "err": {},
                  "uuid": "c6687565-781e-4d80-a9b0-ddfd53267a91",
                  "parentUUID": "74655018-ac84-48d5-92a2-c1c1a79c877d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer POST /transfer Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'Neia',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(201);\nconst respostaEsperada = require('../fixture/respostas/Quando informo valores válidos eu tenho sucesso com 201 CREATED.json');\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);",
                  "err": {},
                  "uuid": "cc781d6f-f200-4c08-a3bc-30b064221494",
                  "parentUUID": "74655018-ac84-48d5-92a2-c1c1a79c877d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faa1a99d-3a29-42a3-b04b-ec738b151d0a",
                "c6687565-781e-4d80-a9b0-ddfd53267a91",
                "cc781d6f-f200-4c08-a3bc-30b064221494"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}