{
  "stats": {
    "suites": 2,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-10T21:09:12.557Z",
    "end": "2025-09-10T21:09:12.628Z",
    "duration": 71,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b1d14ec7-c5e5-4690-89f7-093930fe44dc",
      "title": "",
      "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\external\\transferExternal.test.js",
      "file": "\\test\\rest\\external\\transferExternal.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8c6e993d-2f05-4e9e-8ca8-0edc72910ccf",
          "title": "Transfer",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\external\\transferExternal.test.js",
          "file": "\\test\\rest\\external\\transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "976a9630-778b-4fb0-950d-950d64aab132",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\rest\\external\\transferExternal.test.js",
              "file": "\\test\\rest\\external\\transferExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /transfer\"",
                  "fullTitle": "Transfer POST /transfer \"before all\" hook in \"POST /transfer\"",
                  "timedOut": false,
                  "duration": 30,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postLogin = require('../fixture/requisicoes/login/postLogin.json');\nconst respostaLogin = await request(process.env.BASE_URL_REST)\n  .post('/login')\n  .send(postLogin);\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "3fb3dd3b-3e72-4dbf-9600-b6f169fc4d22",
                  "parentUUID": "976a9630-778b-4fb0-950d-950d64aab132",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer POST /transfer Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postTransfer = require('../fixture/requisicoes/transferencias/postTransfer.json');\nconst resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send(postTransfer);\nexpect(resposta.status).to.equal(201);\nconst respostaEsperada = require('../fixture/respostas/Quando informo valores válidos eu tenho sucesso com 201 CREATED.json');\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);",
                  "err": {},
                  "uuid": "42fbbae3-8413-4dac-900a-822f57e26f73",
                  "parentUUID": "976a9630-778b-4fb0-950d-950d64aab132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testando a regra relacionada a Saldo insuficiente",
                  "fullTitle": "Transfer POST /transfer Testando a regra relacionada a Saldo insuficiente",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postTransfer = require('../fixture/requisicoes/transferencias/postTransfer.json');\nconst resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send(teste.postTransfer);\nexpect(resposta.status).to.equal(teste.statusCode);\nexpect(resposta.body).to.have.property('error', teste.mensagemEsperada);",
                  "err": {},
                  "uuid": "d046108c-258e-4896-815a-8424b6af5472",
                  "parentUUID": "976a9630-778b-4fb0-950d-950d64aab132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testando a regra relacionada a Remetente não encontrado",
                  "fullTitle": "Transfer POST /transfer Testando a regra relacionada a Remetente não encontrado",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postTransfer = require('../fixture/requisicoes/transferencias/postTransfer.json');\nconst resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send(teste.postTransfer);\nexpect(resposta.status).to.equal(teste.statusCode);\nexpect(resposta.body).to.have.property('error', teste.mensagemEsperada);",
                  "err": {},
                  "uuid": "10a99792-1d7b-4208-bac1-bf415c96d097",
                  "parentUUID": "976a9630-778b-4fb0-950d-950d64aab132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testando a regra relacionada a Destinatário não encontrado",
                  "fullTitle": "Transfer POST /transfer Testando a regra relacionada a Destinatário não encontrado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postTransfer = require('../fixture/requisicoes/transferencias/postTransfer.json');\nconst resposta = await request(process.env.BASE_URL_REST)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send(teste.postTransfer);\nexpect(resposta.status).to.equal(teste.statusCode);\nexpect(resposta.body).to.have.property('error', teste.mensagemEsperada);",
                  "err": {},
                  "uuid": "df265609-84c8-4a47-bb65-8cb8754230d9",
                  "parentUUID": "976a9630-778b-4fb0-950d-950d64aab132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42fbbae3-8413-4dac-900a-822f57e26f73",
                "d046108c-258e-4896-815a-8424b6af5472",
                "10a99792-1d7b-4208-bac1-bf415c96d097",
                "df265609-84c8-4a47-bb65-8cb8754230d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}