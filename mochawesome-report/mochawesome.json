{
  "stats": {
    "suites": 5,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-08T13:59:47.928Z",
    "end": "2025-09-08T13:59:48.100Z",
    "duration": 172,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9cc730b1-096e-445e-b0fd-4abfc2a5b49e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 39,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const res = await request(app)\n  .post('/login')\n  .send({ username: 'Maria', password: '123456' });\ntoken = res.body.token;",
          "err": {},
          "uuid": "58323e7e-1b89-4d0f-a72c-9b0c3a756556",
          "parentUUID": "9cc730b1-096e-445e-b0fd-4abfc2a5b49e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f8b30758-5b33-40bd-b989-2b169a0e18be",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\controller\\transferController.test.js",
          "file": "\\test\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "539d578e-68f5-40eb-ac93-6419c45d8daa",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfer Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Jose',\n    to: 'Carlos',\n    amount: 50,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);",
                  "err": {},
                  "uuid": "c67fc7a8-5305-4031-9b5c-db81541b1af3",
                  "parentUUID": "539d578e-68f5-40eb-ac93-6419c45d8daa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfer Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(\n  new Error('Usuário remetente ou destinatário não encontrado'),\n);\nconst resposta = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Rosa',\n    to: 'Bela',\n    amount: 50,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);\nsinon.restore();",
                  "err": {},
                  "uuid": "654af0cf-4d4e-4a9e-bdf1-43d3d7817087",
                  "parentUUID": "539d578e-68f5-40eb-ac93-6419c45d8daa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfer Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({\n  from: 'Maria',\n  to: 'Neia',\n  amount: 100,\n  date: new Date().toISOString(),\n});\nconst resposta = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'Neia',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(201);\nconst respostaEsperada = require('../fixture/respostas/Quando informo valores válidos eu tenho sucesso com 201 CREATED.json');\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);\nsinon.restore();",
                  "err": {},
                  "uuid": "8e554aec-7d1d-4719-9802-273dfc709850",
                  "parentUUID": "539d578e-68f5-40eb-ac93-6419c45d8daa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c67fc7a8-5305-4031-9b5c-db81541b1af3",
                "654af0cf-4d4e-4a9e-bdf1-43d3d7817087",
                "8e554aec-7d1d-4719-9802-273dfc709850"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "e8f563c6-f6c7-4822-8671-b08be3c6b4e9",
          "title": "Transfer",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d8b56d77-2351-4df3-a737-221c8f705179",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\external\\transferExternal.test.js",
              "file": "\\test\\external\\transferExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfer\"",
                  "fullTitle": "Transfer POST /transfer \"before each\" hook in \"POST /transfer\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request('http://localhost:3000')\n  .post('/login')\n  .send({\n    username: 'Maria',\n    password: '123456',\n  });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "e6105dd7-b173-44e5-9eb2-e3b4a281da66",
                  "parentUUID": "d8b56d77-2351-4df3-a737-221c8f705179",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer POST /transfer Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'Rosa',\n    amount: 50,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);",
                  "err": {},
                  "uuid": "048d9c90-1298-4caf-b52b-e9acc4521ecf",
                  "parentUUID": "d8b56d77-2351-4df3-a737-221c8f705179",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer POST /transfer Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'isabelle',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  'error',\n  'Usuário remetente ou destinatário não encontrado',\n);",
                  "err": {},
                  "uuid": "fe6cd589-f6e3-43b9-9021-8bf1f8f9f2d2",
                  "parentUUID": "d8b56d77-2351-4df3-a737-221c8f705179",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer POST /transfer Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    from: 'Maria',\n    to: 'Neia',\n    amount: 100,\n  });\nexpect(resposta.status).to.equal(201);\nconst respostaEsperada = require('../fixture/respostas/Quando informo valores válidos eu tenho sucesso com 201 CREATED.json');\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);",
                  "err": {},
                  "uuid": "77e3b0ca-f974-466e-a83e-975617a0db72",
                  "parentUUID": "d8b56d77-2351-4df3-a737-221c8f705179",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "048d9c90-1298-4caf-b52b-e9acc4521ecf",
                "fe6cd589-f6e3-43b9-9021-8bf1f8f9f2d2",
                "77e3b0ca-f974-466e-a83e-975617a0db72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "6def9a51-bb1e-463d-889f-0712eb6f1947",
          "title": "Mutation: createTransfer",
          "fullFile": "C:\\Users\\erine\\Documents\\Pos-Graduação\\Módulo-7-Automação de Testes na Camada de Serviço (API)\\PGATS-02-Modulo-7-API\\test\\external\\transferExternalGraphql.test.js",
          "file": "\\test\\external\\transferExternalGraphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Mutation: createTransfer\"",
              "fullTitle": "Mutation: createTransfer \"before all\" hook in \"Mutation: createTransfer\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Autentica usuário e obtém token JWT\nconst res = await request(graphqlUrl)\n  .post('')\n  .send({\n    query: `\n      mutation {\n        loginUser(username: \"Maria\", password: \"123456\") {\n          token\n        }\n      }\n    `,\n  });\ntoken = res.body.data.loginUser.token;",
              "err": {},
              "uuid": "e86e4932-0a05-4662-bce9-d9feaa142078",
              "parentUUID": "6def9a51-bb1e-463d-889f-0712eb6f1947",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Mutation: createTransfer\"",
              "fullTitle": "Mutation: createTransfer \"before each\" hook in \"Mutation: createTransfer\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users.forEach((u) => {\n  if (u.username === 'Maria') u.amount = 100;\n  if (u.username === 'Neia') u.amount = 100;\n});",
              "err": {},
              "uuid": "517f163c-da76-4d6a-8b4e-1bf14e84c7c9",
              "parentUUID": "6def9a51-bb1e-463d-889f-0712eb6f1947",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "a) Transferência com sucesso",
              "fullTitle": "Mutation: createTransfer a) Transferência com sucesso",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(graphqlUrl)\n  .post('')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    query: `\n      mutation {\n        createTransfer(from: \"Maria\", to: \"Neia\", value: 50) {\n          from\n          to\n          amount\n          date\n        }\n      }\n    `,\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body.data.createTransfer).to.include({\n  from: 'Maria',\n  to: 'Neia',\n  amount: 50,\n});\nexpect(res.body.data.createTransfer.date).to.be.a('string');",
              "err": {},
              "uuid": "0fc6e83e-6b11-4921-8710-31e161be5add",
              "parentUUID": "6def9a51-bb1e-463d-889f-0712eb6f1947",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b) Sem saldo disponível para transferência",
              "fullTitle": "Mutation: createTransfer b) Sem saldo disponível para transferência",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(graphqlUrl)\n  .post('')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    query: `\n    mutation {\n      createTransfer(from: \"Maria\", to: \"Neia\", value: 999999) {\n        from\n        to\n        amount\n        date\n      }\n    }\n  `,\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('errors');\nexpect(res.body.errors).to.be.an('array');\nexpect(res.body.errors[0].message).to.match(/saldo/i);\nexpect(res.body.data).to.be.null;",
              "err": {},
              "uuid": "b2c49089-ac45-4368-a6b0-937cb0bdfc92",
              "parentUUID": "6def9a51-bb1e-463d-889f-0712eb6f1947",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c) Token de autenticação não informado",
              "fullTitle": "Mutation: createTransfer c) Token de autenticação não informado",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(graphqlUrl)\n  .post('')\n  .send({\n    query: `\n      mutation {\n        createTransfer(from: \"Maria\", to: \"Neia\", value: 50) {\n          from\n          to\n          amount\n          date\n        }\n      }\n    `,\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body.errors).to.be.an('array');\nexpect(res.body.errors[0].message).to.match(/Autenticação obrigatória/i);",
              "err": {},
              "uuid": "a31affe6-127a-4fa7-8c10-3d2e939b8be9",
              "parentUUID": "6def9a51-bb1e-463d-889f-0712eb6f1947",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0fc6e83e-6b11-4921-8710-31e161be5add",
            "b2c49089-ac45-4368-a6b0-937cb0bdfc92",
            "a31affe6-127a-4fa7-8c10-3d2e939b8be9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}